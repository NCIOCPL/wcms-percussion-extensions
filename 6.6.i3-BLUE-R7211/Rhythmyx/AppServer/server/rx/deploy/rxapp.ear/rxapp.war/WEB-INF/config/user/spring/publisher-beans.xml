<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

	<tx:annotation-driven transaction-manager="sys_transactionManager"/>

	<!-- Publishing handler setup for the assembly and status queues -->
	<bean id="sys_publishMessageHandlerContainerQ"
		  class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		  <property name="concurrentConsumers" value="4"/>
		  <property name="connectionFactory" ref="sys_jmsConnectionFactory" />
		  <property name="destination" ref="sys_publishQueueDestination" />
		  <property name="messageListener" ref="sys_publishQueueListener" />
	</bean>	
		
	<bean id="sys_fileDeliveryHandler"
		class="com.percussion.rx.delivery.impl.PSFileDeliveryHandler">
	</bean>
	
	<bean id="sys_ftpDeliveryHandler"
		class="com.percussion.rx.delivery.impl.PSFtpDeliveryHandler">
		<!-- Properties that can be set here:
			timeout 
				(defaults to -1 as not defined. 
				It is the socket timeout in milliseconds for both when opening a 
				socket and a currently open connection).
			usePassiveMode 
				(defaults to false. 
				Determines if using passive or active mode for the FTP client. 
				Defaults to use active mode. If using passive mode is on, then it 
				will also disable the remote verification  
		-->
	</bean>	
	
	<bean id="sys_databaseDeliveryHandler"
	  class="com.percussion.rx.delivery.impl.PSDatabaseDeliveryHandler">
	</bean>
	
   <bean id="sys_sftpDeliveryHandler"
      class="com.percussion.rx.delivery.impl.PSSFtpDeliveryHandler">
		<!-- Properties that can be set here:
			timeout 
				(defaults to -1 as not defined. 
				It is the socket timeout in milliseconds for the underlying provider) 
			umask
				(defaults to null as not defined
				It is a 3-character string of octal digits if defined.
				if the umask is not defined, then the permissions of the created
				files and directories are controled by the configuration of the
				login user ID of the SSH server. If the umask is defined, then
				the permissions of the created filed and directories will be 
				modified according to the specified umask.  
				
				property name="umask"	value="022"
				) 
		-->
   </bean>

	<!-- Below is a few examples of using the wrapper handler to encapsulate a 
	  legacy publishing handler for use with the new publishing model.
	  
	  The properties implemented by PSWrapperDeliveryHandler are:
	  
	  publisherClass (plugin class name), 
	  DebugMode ("true" or "false"), 
 	  usePassiveMode (use FTP passive mode, "true" or "false", 
 	     defaults to "false"), 
 	  ftpRcvTimeout (FTP timeout in seconds) and 
 	  useSyncDelivery ("true" or "false", defaults to "true". It may deliver in 
 	     parallel if it is "true". It must be "false" for the legacy handler of
 	     "com.percussion.publisher.client.PSFtpPublisherHandler" and 
 	     "com.percussion.publisher.client.PSDatabasePublisherHandler")
	  -->
 
   <!-- 
	<bean id="sys_legacyFileDeliveryHandler"
		class="com.percussion.rx.delivery.impl.PSWrapperDeliveryHandler">
		<property name="publisherClass" 
			value="com.percussion.publisher.client.PSFilePublisherHandler"/>
		<property name="useSyncDelivery" value="false" />
	</bean>
	<bean id="sys_legacyFtpDeliveryHandler" scope="prototype"
		class="com.percussion.rx.delivery.impl.PSWrapperDeliveryHandler">
		<property name="publisherClass" 
			value="com.percussion.publisher.client.PSFtpPublisherHandler"/>
	</bean>
	<bean id="sys_legacyDatabaseDeliveryHandler" scope="prototype"
		class="com.percussion.rx.delivery.impl.PSWrapperDeliveryHandler">
		<property name="publisherClass" 
			value="com.percussion.publisher.client.PSDatabasePublisherHandler"/>
	</bean>
	 -->
	 
</beans>